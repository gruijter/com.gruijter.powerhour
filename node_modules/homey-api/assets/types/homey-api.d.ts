export namespace AthomCloudAPI {
  export class Device {
    id: string;
  }

  export class Homey {
    id: string;

    authenticate(opts?: { strategy?: string | Array<any> }): Promise<HomeyAPI>;
  }

  export class StorageAdapter {
    get(): Promise<object>;

    set(value: object): Promise<void>;
  }

  export class StorageAdapterBrowser extends StorageAdapter {
    get(): Promise<object>;

    set(value: object): Promise<void>;
  }

  export class StorageAdapterMemory extends StorageAdapter {
    get(): Promise<object>;

    set(value: object): Promise<void>;
  }

  export class Token {
    token_type: string;

    access_token: string;

    refresh_token: string;

    expires_in: number;

    grant_type: string;
  }

  export class User {
    id: string;

    getHomeys(): Array<AthomCloudAPI.Homey>;

    getHomeyById(id: string): AthomCloudAPI.Homey;

    getFirstHomey(): AthomCloudAPI.Homey;
  }
}

export namespace HomeyAPIV2.ManagerAlarms {
  export class Alarm extends HomeyAPIV3Local.ManagerAlarms.Alarm {
    id: string;

    name: string;

    time: string;

    enabled: boolean;

    nextOccurance: string;

    repetition: object;
  }
}

export namespace HomeyAPIV2.ManagerApps {
  export class App extends HomeyAPIV3Local.ManagerApps.App {
    enabled: boolean;

    autoupdate: boolean;

    id: string;

    sdk: number;

    name: string;

    origin: string;

    channel: string;

    version: string;

    compatibility: string;

    icon: string;

    iconObj: object;

    author: object;

    permissions: Array<any>;

    images: object;

    session: string;

    ready: boolean;

    state: string;

    crashed: boolean;

    crashedMessage: string;

    exitCode: number;

    exitSignal: string;

    exitCount: number;

    settings: boolean;

    brandColor: string;

    hasDrivers: boolean;

    usage: object;

    updateAvailable: object;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;
  }
}

export namespace HomeyAPIV2.ManagerDevices {
  export class Capability extends HomeyAPIV3Local.ManagerDevices.Capability {
    id: string;

    uri: string;

    title: string;

    desc: string;

    type: string;

    getable: boolean;

    setable: boolean;

    chartType: string;

    decimals: number;

    min: number;

    max: number;

    step: number;

    units: string;

    values: Array<any>;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;
  }

  export class Device extends HomeyAPIV3Local.ManagerDevices.Device {
    id: string;

    name: string;

    driverUri: string;

    driverId: string;

    zone: string;

    data: object;

    icon: string;

    iconObj: object;

    iconOverride: string | null;

    settings: object;

    settingsObj: boolean;

    class: string;

    energy: object;

    energyObj: object;

    virtualClass: string | null;

    ui: object;

    uiIndicator: string | null;

    capabilities: Array<any>;

    capabilitiesObj: object;

    capabilitiesOptions: object;

    flags: Array<any>;

    ready: boolean;

    available: boolean;

    repair: boolean;

    unpair: boolean;

    unavailableMessage: string;

    images: Array<any>;

    insights: Array<any>;

    color: string;

    note: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;
  }
}

export namespace HomeyAPIV2.ManagerDrivers {
  export class Driver extends HomeyAPIV3Local.ManagerDrivers.Driver {
    id: string;

    uri: string;

    uriObj: object;

    icon: string;

    iconObj: object;

    ready: boolean;

    pair: boolean;

    unpair: boolean;

    repair: boolean;

    color: string;

    deprecated: boolean;

    class: string;

    connectivity: Array<any>;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;
  }

  export class PairSession extends HomeyAPIV3Local.ManagerDrivers.PairSession {
    id: string;

    type: string;

    driverId: string;

    driverUri: string;

    deviceId: string;

    zoneId: string;

    views: Array<any>;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;
  }
}

export namespace HomeyAPIV2.ManagerFlow {
  export class AdvancedFlow extends HomeyAPIV3Local.ManagerFlow.AdvancedFlow {
    id: string;

    name: string;

    enabled: boolean;

    broken: boolean;

    triggerable: boolean;

    folder: string | null;

    cards: object;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;
  }

  export class Flow extends HomeyAPIV3Local.ManagerFlow.Flow {
    id: string;

    name: string;

    enabled: boolean;

    folder: string | null;

    order: number;

    broken: boolean;

    triggerable: boolean;

    trigger: object;

    conditions: Array<any>;

    actions: Array<any>;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;
  }

  export class FlowCardAction extends HomeyAPIV3Local.ManagerFlow
    .FlowCardAction {
    uri: string;

    id: string;

    args: object;

    deprecated: boolean;

    droptoken: boolean;

    duration: boolean;

    uriObj: object;

    advanced: boolean;

    title: string;

    hint: string;

    highlight: boolean;

    tokens: Array<any>;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;
  }

  export class FlowCardCondition extends HomeyAPIV3Local.ManagerFlow
    .FlowCardCondition {
    uri: string;

    id: string;

    args: object;

    deprecated: boolean;

    droptoken: boolean;

    duration: boolean;

    uriObj: object;

    advanced: boolean;

    title: string;

    hint: string;

    highlight: boolean;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;
  }

  export class FlowCardTrigger extends HomeyAPIV3Local.ManagerFlow
    .FlowCardTrigger {
    uri: string;

    id: string;

    args: object;

    deprecated: boolean;

    droptoken: boolean;

    duration: boolean;

    uriObj: object;

    advanced: boolean;

    title: string;

    hint: string;

    highlight: boolean;

    tokens: Array<any>;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;
  }

  export class FlowFolder extends HomeyAPIV3Local.ManagerFlow.FlowFolder {
    id: string;

    name: string;

    order: number;

    parent: string;
  }
}

export namespace HomeyAPIV2.ManagerFlowToken {
  export class FlowToken extends HomeyAPIV3Local.ManagerFlowToken.FlowToken {
    uri: string;

    id: string;

    title: string;

    type: string;

    value: object;

    uriObj: object;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;
  }
}

export namespace HomeyAPIV2.ManagerImages {
  export class Image extends HomeyAPIV3Local.ManagerImages.Image {
    id: string;

    ownerUri: string;

    url: string;

    lastUpdated: string;
  }
}

export namespace HomeyAPIV2.ManagerInsights {
  export class Log extends HomeyAPIV3Local.ManagerInsights.Log {
    uri: string;

    id: string;

    title: string;

    titleTrue: string;

    titleFalse: string;

    type: string;

    units: string;

    decimals: number;

    lastValue: number;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;
  }
}

export namespace HomeyAPIV2.ManagerLogic {
  export class Variable extends HomeyAPIV3Local.ManagerLogic.Variable {
    id: string;

    name: string;

    type: string;
  }
}

export namespace HomeyAPIV2.ManagerNotifications {
  export class Notification extends HomeyAPIV3Local.ManagerNotifications
    .Notification {
    id: string;

    ownerUri: string;

    dateCreated: object;

    dateExpires: string;

    excerpt: string;

    icon: string;

    iconObj: object;

    priority: string;

    readBy: Array<any>;

    roles: Array<any>;

    meta: object;
  }
}

export namespace HomeyAPIV2.ManagerSessions {
  export class Session extends HomeyAPIV3Local.ManagerSessions.Session {
    id: string;

    type: string;

    agent: string;

    clientName: string;

    scopes: Array<any>;

    intersectedScopes: Array<any>;

    createdAt: string;

    expiresAt: string;

    lastUsed: boolean;
  }
}

export namespace HomeyAPIV2.ManagerSpeechOutput {
  export class Voice extends HomeyAPIV3Local.ManagerSpeechOutput.Voice {
    id: string;

    name: string;

    language: string;

    locale: string;

    gender: string;
  }
}

export namespace HomeyAPIV2.ManagerUsers {
  export class User extends HomeyAPIV3Local.ManagerUsers.User {
    id: string;

    name: string;

    athomId: string;

    properties: object;

    enabled: boolean;

    verified: boolean;

    role: string;

    present: boolean;

    asleep: boolean;
  }
}

export namespace HomeyAPIV2.ManagerZones {
  export class Zone extends HomeyAPIV3Local.ManagerZones.Zone {
    id: string;

    name: string;

    order: number;

    parent: string;

    active: boolean;

    icon: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;
  }
}

export namespace HomeyAPIV3Cloud.ManagerApps {
  export class App extends HomeyAPIV3.ManagerApps.App {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    call(opts: {
      method: "GET" | "POST" | "PUT" | "DELETE";

      path: String;

      body: any;
    }): Promise<any>;

    get(opts: { path: string }): Promise<any>;

    post(opts: {
      path: string;

      body: object;
    }): Promise<any>;

    put(opts: {
      path: string;

      body: object;
    }): Promise<any>;

    delete(opts: { path: string }): Promise<any>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class AppSettings {
    id: string;
  }
}

export namespace HomeyAPIV3Cloud.ManagerCloud {
  export class Webhook {
    id: string;
  }
}

export namespace HomeyAPIV3Cloud.ManagerCron {
  export class Cronjob {
    id: string;
  }
}

export namespace HomeyAPIV3Cloud.ManagerDevices {
  export class Capability extends HomeyAPIV3.ManagerDevices.Capability {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class Device extends HomeyAPIV3.ManagerDevices.Device {
    id: string;

    name: string;

    note: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    makeCapabilityInstance(
      capabilityId: string,

      listener: (value: number | boolean | string) => any,
    ): HomeyAPIV3.ManagerDevices.Device.DeviceCapability;

    setCapabilityValue(opts: {
      capabilityId: string;

      value: number | boolean | string;

      opts?: {
        duration?: number;
      };
    }): Promise<void>;

    getZone(): Promise<HomeyAPIV3.ManagerZones.Zone>;

    getDriver(): Promise<HomeyAPIV3.ManagerDrivers.Driver>;

    getLogs(): Promise<{ [key: string]: HomeyAPIV3.ManagerInsights.Log }>;

    getFlows(): Promise<{ [key: string]: HomeyAPIV3.ManagerFlow.Flow }>;

    getAdvancedFlows(): Promise<{
      [key: string]: HomeyAPIV3.ManagerFlow.AdvancedFlow;
    }>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export namespace HomeyAPIV3Cloud.ManagerDrivers {
  export class Driver extends HomeyAPIV3.ManagerDrivers.Driver {
    id: string;

    pair: Array<any>;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class PairSession extends HomeyAPIV3.ManagerDrivers.PairSession {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export namespace HomeyAPIV3Cloud.ManagerFlow {
  export class AdvancedFlow extends HomeyAPIV3.ManagerFlow.AdvancedFlow {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    isBroken(): Promise<any>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class Flow extends HomeyAPIV3.ManagerFlow.Flow {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    isBroken(): Promise<any>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class FlowCardAction extends HomeyAPIV3.ManagerFlow.FlowCardAction {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class FlowCardCondition extends HomeyAPIV3.ManagerFlow
    .FlowCardCondition {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class FlowCardTrigger extends HomeyAPIV3.ManagerFlow.FlowCardTrigger {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class FlowFolder {
    id: string;
  }
}

export namespace HomeyAPIV3Cloud.ManagerFlowToken {
  export class FlowToken extends HomeyAPIV3.ManagerFlowToken.FlowToken {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export namespace HomeyAPIV3Cloud.ManagerIcons {
  export class Icon {
    id: string;
  }
}

export namespace HomeyAPIV3Cloud.ManagerImages {
  export class Image {
    id: string;
  }
}

export namespace HomeyAPIV3Cloud.ManagerInsights {
  export class Log extends HomeyAPIV3.ManagerInsights.Log {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class LogEntryBoolean {
    id: string;
  }
}

export namespace HomeyAPIV3Cloud.ManagerLogic {
  export class Variable {
    id: string;

    name: string;

    type: string;
  }
}

export namespace HomeyAPIV3Cloud.ManagerNotifications {
  export class Notification {
    id: string;

    ownerUri: string;

    dateCreated: string;

    excerpt: string;

    meta: object;
  }
}

export namespace HomeyAPIV3Cloud.ManagerRF {
  export class Signal {
    id: string;
  }
}

export namespace HomeyAPIV3Cloud.ManagerSessions {
  export class Session {
    id: string;

    type: string;

    scopes: Array<any>;

    intersectedScopes: Array<any>;
  }
}

export namespace HomeyAPIV3Cloud.ManagerUsers {
  export class User {
    id: string;
  }
}

export namespace HomeyAPIV3Cloud.ManagerVirtualDevice {
  export class VirtualDeviceDummySocket {
    id: string;
  }

  export class VirtualDeviceHomeyBridge {
    id: string;
  }

  export class VirtualDeviceInfrared {
    id: string;
  }

  export class VirtualDeviceZigbee {
    id: string;
  }

  export class VirtualDeviceZwave {
    id: string;
  }

  export class VirtualDriverDummySocket {
    id: string;
  }

  export class VirtualDriverHomeyBridge {
    id: string;
  }

  export class VirtualDriverInfrared {
    id: string;
  }

  export class VirtualDriverZigbee {
    id: string;
  }

  export class VirtualDriverZwave {
    id: string;
  }
}

export namespace HomeyAPIV3Cloud.ManagerZones {
  export class Zone extends HomeyAPIV3.ManagerZones.Zone {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    getParent(): Promise<HomeyAPIV3.ManagerZones.Zone | null>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export namespace HomeyAPIV3Local.ManagerAlarms {
  export class Alarm {}
}

export namespace HomeyAPIV3Local.ManagerApps {
  export class App extends HomeyAPIV3.ManagerApps.App {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    call(opts: {
      method: "GET" | "POST" | "PUT" | "DELETE";

      path: String;

      body: any;
    }): Promise<any>;

    get(opts: { path: string }): Promise<any>;

    post(opts: {
      path: string;

      body: object;
    }): Promise<any>;

    put(opts: {
      path: string;

      body: object;
    }): Promise<any>;

    delete(opts: { path: string }): Promise<any>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class AppSettings {
    id: string;
  }
}

export namespace HomeyAPIV3Local.ManagerCloud {
  export class Webhook {
    id: string;
  }
}

export namespace HomeyAPIV3Local.ManagerCron {
  export class Cronjob {
    id: string;
  }
}

export namespace HomeyAPIV3Local.ManagerDevices {
  export class Capability extends HomeyAPIV3.ManagerDevices.Capability {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class Device extends HomeyAPIV3.ManagerDevices.Device {
    id: string;

    name: string;

    note: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    makeCapabilityInstance(
      capabilityId: string,

      listener: (value: number | boolean | string) => any,
    ): HomeyAPIV3.ManagerDevices.Device.DeviceCapability;

    setCapabilityValue(opts: {
      capabilityId: string;

      value: number | boolean | string;

      opts?: {
        duration?: number;
      };
    }): Promise<void>;

    getZone(): Promise<HomeyAPIV3.ManagerZones.Zone>;

    getDriver(): Promise<HomeyAPIV3.ManagerDrivers.Driver>;

    getLogs(): Promise<{ [key: string]: HomeyAPIV3.ManagerInsights.Log }>;

    getFlows(): Promise<{ [key: string]: HomeyAPIV3.ManagerFlow.Flow }>;

    getAdvancedFlows(): Promise<{
      [key: string]: HomeyAPIV3.ManagerFlow.AdvancedFlow;
    }>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export namespace HomeyAPIV3Local.ManagerDiscovery {
  export class DiscoveryStrategyMAC {
    id: string;
  }

  export class DiscoveryStrategyMDNSSD {
    id: string;
  }

  export class DiscoveryStrategySSDP {
    id: string;
  }
}

export namespace HomeyAPIV3Local.ManagerDrivers {
  export class Driver extends HomeyAPIV3.ManagerDrivers.Driver {
    id: string;

    pair: Array<any>;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class PairSession extends HomeyAPIV3.ManagerDrivers.PairSession {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export namespace HomeyAPIV3Local.ManagerExperiments {
  export class ExperimentHomeKit {
    id: string;
  }

  export class ExperimentPowerUser {
    id: string;
  }

  export class ExperimentSSH {
    id: string;
  }

  export class ExperimentVirtualDevices {
    id: string;
  }
}

export namespace HomeyAPIV3Local.ManagerFlow {
  export class AdvancedFlow extends HomeyAPIV3.ManagerFlow.AdvancedFlow {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    isBroken(): Promise<any>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class Flow extends HomeyAPIV3.ManagerFlow.Flow {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    isBroken(): Promise<any>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class FlowCardAction extends HomeyAPIV3.ManagerFlow.FlowCardAction {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class FlowCardCondition extends HomeyAPIV3.ManagerFlow
    .FlowCardCondition {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class FlowCardTrigger extends HomeyAPIV3.ManagerFlow.FlowCardTrigger {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class FlowFolder {
    id: string;
  }
}

export namespace HomeyAPIV3Local.ManagerFlowToken {
  export class FlowToken extends HomeyAPIV3.ManagerFlowToken.FlowToken {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export namespace HomeyAPIV3Local.ManagerIcons {
  export class Icon {
    id: string;
  }
}

export namespace HomeyAPIV3Local.ManagerImages {
  export class Image {
    id: string;
  }
}

export namespace HomeyAPIV3Local.ManagerInsights {
  export class Log extends HomeyAPIV3.ManagerInsights.Log {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class LogEntryBoolean {
    id: string;
  }
}

export namespace HomeyAPIV3Local.ManagerLogic {
  export class Variable {
    id: string;

    name: string;

    type: string;
  }
}

export namespace HomeyAPIV3Local.ManagerNotifications {
  export class Notification {
    id: string;

    ownerUri: string;

    dateCreated: string;

    excerpt: string;

    meta: object;
  }
}

export namespace HomeyAPIV3Local.ManagerRF {
  export class Signal {
    id: string;
  }
}

export namespace HomeyAPIV3Local.ManagerSessions {
  export class Session {
    id: string;

    type: string;

    scopes: Array<any>;

    intersectedScopes: Array<any>;
  }
}

export namespace HomeyAPIV3Local.ManagerUsers {
  export class User {
    id: string;
  }
}

export namespace HomeyAPIV3Local.ManagerVirtualDevice {
  export class VirtualDeviceDummySocket {
    id: string;
  }

  export class VirtualDeviceHomeyBridge {
    id: string;
  }

  export class VirtualDeviceInfrared {
    id: string;
  }

  export class VirtualDeviceMatter {
    id: string;
  }

  export class VirtualDeviceVirtualButton {
    id: string;
  }

  export class VirtualDeviceVirtualIPCamera {
    id: string;
  }

  export class VirtualDeviceVirtualSocket {
    id: string;
  }

  export class VirtualDeviceZigbee {
    id: string;
  }

  export class VirtualDeviceZwave {
    id: string;
  }

  export class VirtualDriverDummySocket {
    id: string;
  }

  export class VirtualDriverHomeyBridge {
    id: string;
  }

  export class VirtualDriverInfrared {
    id: string;
  }

  export class VirtualDriverMatter {
    id: string;
  }

  export class VirtualDriverVirtualButton {
    id: string;
  }

  export class VirtualDriverVirtualIPCamera {
    id: string;
  }

  export class VirtualDriverVirtualSocket {
    id: string;
  }

  export class VirtualDriverZigbee {
    id: string;
  }

  export class VirtualDriverZwave {
    id: string;
  }
}

export namespace HomeyAPIV3Local.ManagerZones {
  export class Zone extends HomeyAPIV3.ManagerZones.Zone {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    getParent(): Promise<HomeyAPIV3.ManagerZones.Zone | null>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export class APIError extends Error {
  constructor(
    message: string,

    statusCode: number,
  );

  message: string;

  statusCode: number;

  message: string;

  statusCode: number;
}

export class APIErrorHomeyOffline extends APIError {
  message: string;

  statusCode: number;
}

export class APIErrorNotFound extends APIError {
  message: string;

  statusCode: number;
}

export class APIErrorTimeout extends APIError {
  message: string;

  statusCode: number;
}

export class AthomCloudAPI {
  constructor(opts?: {
    baseUrl?: string;

    debug?: boolean;

    secret?: string;

    clientId: string;

    clientSecret: string;

    redirectUrl: string;

    autoRefreshTokens?: boolean;

    token?: AthomCloudAPI.Token;

    store?: AthomCloudAPI.StorageAdapter;
  });

  getAuthenticatedUser(opts: { additionalScopes?: string }): Promise<any>;

  isLoggedIn(): Promise<boolean>;

  getAuthenticatedUser(opts?: { $cache?: object }): Promise<AthomCloudAPI.User>;

  hasAuthorizationCode(): boolean;

  getLoginUrl(opts?: {
    state?: string;

    scopes?: Array<string>;
  }): string;

  logout(): Promise<void>;

  authenticateWithAuthorizationCode(opts?: {
    code: String;

    removeCodeFromHistory?: Boolean;
  }): Promise<AthomCloudAPI.Token>;

  getAuthenticatedUser(opts: { additionalScopes?: string }): Promise<any>;

  isLoggedIn(): Promise<boolean>;

  getAuthenticatedUser(opts?: { $cache?: object }): Promise<AthomCloudAPI.User>;

  hasAuthorizationCode(): boolean;

  getLoginUrl(opts?: {
    state?: string;

    scopes?: Array<string>;
  }): string;

  logout(): Promise<void>;

  authenticateWithAuthorizationCode(opts?: {
    code: String;

    removeCodeFromHistory?: Boolean;
  }): Promise<AthomCloudAPI.Token>;
}

export class HomeyAPI {
  __(input: {
    en: string;

    nl: string;
  }): string | null;

  hasRole(roleId: string): any;

  static createAppAPI(opts: {
    homey: Homey;

    debug?: Function | null;
  }): Promise<any>;

  static createLocalAPI(opts: {
    address: String;

    token: String;

    debug: Function | null;
  }): Promise<any>;
}

export class HomeyAPIV1 extends HomeyAPI {}

export class HomeyAPIV2 extends HomeyAPIV3 {}

export class HomeyAPIV3 extends HomeyAPI {
  isConnected(): Boolean;

  __(input: {
    en: string;

    nl: string;
  }): string | null;

  hasRole(roleId: string): any;
}

export class HomeyAPIV3Cloud extends HomeyAPIV3 {
  isConnected(): Boolean;

  __(input: {
    en: string;

    nl: string;
  }): string | null;

  hasRole(roleId: string): any;
}

export class HomeyAPIV3Local extends HomeyAPIV3 {
  isConnected(): Boolean;

  __(input: {
    en: string;

    nl: string;
  }): string | null;

  hasRole(roleId: string): any;
}

export class APIError extends Error {
  constructor(
    message: string,

    statusCode: number,
  );

  message: string;

  statusCode: number;

  message: string;

  statusCode: number;
}

export class APIErrorHomeyOffline extends APIError {
  message: string;

  statusCode: number;
}

export class APIErrorNotFound extends APIError {
  message: string;

  statusCode: number;
}

export class APIErrorTimeout extends APIError {
  message: string;

  statusCode: number;
}

export class AthomCloudAPI {
  constructor(opts?: {
    baseUrl?: string;

    debug?: boolean;

    secret?: string;

    clientId: string;

    clientSecret: string;

    redirectUrl: string;

    autoRefreshTokens?: boolean;

    token?: AthomCloudAPI.Token;

    store?: AthomCloudAPI.StorageAdapter;
  });

  getAuthenticatedUser(opts: { additionalScopes?: string }): Promise<any>;

  isLoggedIn(): Promise<boolean>;

  getAuthenticatedUser(opts?: { $cache?: object }): Promise<AthomCloudAPI.User>;

  hasAuthorizationCode(): boolean;

  getLoginUrl(opts?: {
    state?: string;

    scopes?: Array<string>;
  }): string;

  logout(): Promise<void>;

  authenticateWithAuthorizationCode(opts?: {
    code: String;

    removeCodeFromHistory?: Boolean;
  }): Promise<AthomCloudAPI.Token>;

  getAuthenticatedUser(opts: { additionalScopes?: string }): Promise<any>;

  isLoggedIn(): Promise<boolean>;

  getAuthenticatedUser(opts?: { $cache?: object }): Promise<AthomCloudAPI.User>;

  hasAuthorizationCode(): boolean;

  getLoginUrl(opts?: {
    state?: string;

    scopes?: Array<string>;
  }): string;

  logout(): Promise<void>;

  authenticateWithAuthorizationCode(opts?: {
    code: String;

    removeCodeFromHistory?: Boolean;
  }): Promise<AthomCloudAPI.Token>;
}

export namespace HomeyAPIV3Cloud {
  export class Item extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class Manager extends HomeyAPIV3.Manager {
    homey: HomeyAPIV3;

    uri: String;

    isConnected(): Boolean;

    connect(): Promise<void>;

    disconnect(): Promise<void>;

    destroy(): any;

    emit(
      event: string,

      data: any,
    ): any;

    addListener(
      event: string,

      callback: Function,
    ): any;

    on(
      event: string,

      callback: Function,
    ): any;

    once(
      event: string,

      callback: Function,
    ): any;

    off(
      event: string,

      callback: Function,
    ): any;

    removeListener(
      event: string,

      callback: Function,
    ): any;

    removeAllListeners(event?: string): any;
  }

  export class ManagerApi extends HomeyAPIV3.ManagerApi {
    getState(): Promise<any>;
  }

  export class ManagerApps extends HomeyAPIV3.ManagerApps {
    getState(): Promise<any>;

    getApps(): Promise<{ [key: string]: HomeyAPIV3Cloud.ManagerApps.App }>;

    getApp(opts: { id: string }): Promise<HomeyAPIV3Cloud.ManagerApps.App>;

    installFromAppStore(opts: {
      id: string;

      channel?: string;
    }): Promise<any>;

    uninstallApp(opts: { id: string }): Promise<any>;

    getAppSettings(opts: {
      id: string;
    }): Promise<HomeyAPIV3Cloud.ManagerApps.AppSettings>;

    getAppSetting(opts: {
      name: string;

      id: string;
    }): Promise<any>;

    setAppSetting(opts: {
      name: string;

      id: string;

      value: any;
    }): Promise<any>;

    unsetAppSetting(opts: {
      name: string;

      id: string;
    }): Promise<any>;

    getAppStd(opts: {
      id: string;

      message: string;
    }): Promise<any>;
  }

  export class ManagerBLE extends HomeyAPIV3.ManagerBLE {
    getState(): Promise<any>;

    runCommand(opts: {
      command: string;

      opts?: object;
    }): Promise<any>;
  }

  export class ManagerClock extends HomeyAPIV3.ManagerClock {
    getState(): Promise<any>;
  }

  export class ManagerCloud extends HomeyAPIV3.ManagerCloud {
    getState(): Promise<any>;

    emitOAuth2Callback(opts: {
      app?: string;

      token?: string;

      code?: string;
    }): Promise<any>;

    emitWebhookCallback(opts: {
      id: string;

      args?: object;
    }): Promise<any>;
  }

  export class ManagerCoprocessor extends HomeyAPIV3.ManagerCoprocessor {
    getState(): Promise<any>;

    getBridges(): Promise<any>;

    getLog(): Promise<any>;

    pairBridge(opts: { serialHash: string }): Promise<any>;
  }

  export class ManagerCron extends HomeyAPIV3.ManagerCron {
    getState(): Promise<any>;
  }

  export class ManagerDatabase extends HomeyAPIV3.ManagerDatabase {
    getState(): Promise<any>;
  }

  export class ManagerDevices extends HomeyAPIV3.ManagerDevices {
    getState(): Promise<any>;

    getDevice(opts: {
      id: string;
    }): Promise<HomeyAPIV3Cloud.ManagerDevices.Device>;

    getDeviceSettingsObj(opts: { id: string }): Promise<any>;

    setDeviceSettings(opts: {
      id: string;

      settings: object;
    }): Promise<any>;

    getDevices(): Promise<{
      [key: string]: HomeyAPIV3Cloud.ManagerDevices.Device;
    }>;

    updateDevice(opts: {
      id: string;

      device: {
        name?: string;

        zone?: string;

        note?: string;

        iconOverride?: string;

        virtualClass?: string;

        uiIndicator?: string;
      };
    }): Promise<HomeyAPIV3Cloud.ManagerDevices.Device>;

    deleteDevice(opts: { id: string }): Promise<any>;

    getCapabilityValue(opts: {
      capabilityId: string;

      deviceId: string;
    }): Promise<any>;

    setCapabilityValue(opts: {
      capabilityId: string;

      deviceId: string;

      value: string | number | boolean;

      opts?: object;

      transactionId?: string;
    }): Promise<any>;
  }

  export class ManagerDevkit extends HomeyAPIV3.ManagerDevkit {
    getState(): Promise<any>;

    installApp(opts: {
      manifest: object;

      clean?: boolean;
    }): Promise<any>;

    uninstallApp(opts: { sessionId: string }): Promise<any>;
  }

  export class ManagerDrivers extends HomeyAPIV3.ManagerDrivers {
    homey: HomeyAPIV3;

    uri: String;

    getState(): Promise<any>;

    getDrivers(): Promise<{
      [key: string]: HomeyAPIV3Cloud.ManagerDrivers.Driver;
    }>;

    getPairSession(opts: {
      id: string;
    }): Promise<HomeyAPIV3Cloud.ManagerDrivers.PairSession>;

    createPairSession(opts: {
      pairsession: {
        type: string;

        driverId: string;

        deviceId?: string;

        zoneId?: string;
      };
    }): Promise<HomeyAPIV3Cloud.ManagerDrivers.PairSession>;

    deletePairSession(opts: { id: string }): Promise<any>;

    emitPairingHeartbeat(opts: { id: string }): Promise<any>;

    emitPairingEvent(opts: {
      id: string;

      event: string;

      data?: any;
    }): Promise<any>;

    emitPairingCallback(opts: {
      id: string;

      callbackId: string;

      data?: any;
    }): Promise<any>;

    createPairSessionDevice(opts: {
      id: string;

      device: {
        name?: string;

        data: any;

        zone?: string;

        store?: object;

        capabilities?: Array<any>;

        capabilitiesOptions?: object;

        class?: string;

        icon?: string;

        iconOverride?: string;

        settings?: object;

        energy?: object;
      };
    }): Promise<any>;

    deletePairSessionDevice(opts: { id: string }): Promise<any>;

    isConnected(): Boolean;

    connect(): Promise<void>;

    disconnect(): Promise<void>;

    destroy(): any;

    emit(
      event: string,

      data: any,
    ): any;

    addListener(
      event: string,

      callback: Function,
    ): any;

    on(
      event: string,

      callback: Function,
    ): any;

    once(
      event: string,

      callback: Function,
    ): any;

    off(
      event: string,

      callback: Function,
    ): any;

    removeListener(
      event: string,

      callback: Function,
    ): any;

    removeAllListeners(event?: string): any;
  }

  export class ManagerEnergy extends HomeyAPIV3.ManagerEnergy {
    getState(): Promise<any>;

    getLiveReport(opts: { zone?: string }): Promise<any>;
  }

  export class ManagerFlow extends HomeyAPIV3.ManagerFlow {
    getState(): Promise<any>;

    getFlow(opts: { id: string }): Promise<HomeyAPIV3Cloud.ManagerFlow.Flow>;

    getFlows(): Promise<{ [key: string]: HomeyAPIV3Cloud.ManagerFlow.Flow }>;

    createFlow(opts: {
      flow: {
        name: string;

        folder?: string;

        enabled?: boolean;

        trigger: object;

        conditions: Array<any>;

        actions: Array<any>;
      };
    }): Promise<HomeyAPIV3Cloud.ManagerFlow.Flow>;

    updateFlow(opts: {
      id: string;

      flow: {
        name?: string;

        folder?: string;

        enabled?: boolean;

        trigger?: object;

        conditions?: Array<any>;

        actions?: Array<any>;
      };
    }): Promise<HomeyAPIV3Cloud.ManagerFlow.Flow>;

    deleteFlow(opts: { id: string }): Promise<any>;

    testFlow(opts: {
      flow: {
        trigger: object;

        conditions: Array<any>;

        actions: Array<any>;
      };

      tokens: object;

      sessionId: string;
    }): Promise<any>;

    triggerFlow(opts: { id: string }): Promise<any>;

    shareFlow(opts: { id: string }): Promise<any>;

    getFlowFolders(): Promise<{
      [key: string]: HomeyAPIV3Cloud.ManagerFlow.FlowFolder;
    }>;

    getFlowFolder(opts: {
      id: string;
    }): Promise<HomeyAPIV3Cloud.ManagerFlow.FlowFolder>;

    createFlowFolder(opts: {
      flowfolder: {
        name: string;

        parent?: string;
      };
    }): Promise<HomeyAPIV3Cloud.ManagerFlow.FlowFolder>;

    updateFlowFolder(opts: {
      id: string;

      flowfolder: {
        name?: string;

        parent?: string;
      };
    }): Promise<HomeyAPIV3Cloud.ManagerFlow.FlowFolder>;

    deleteFlowFolder(opts: { id: string }): Promise<any>;

    getFlowCardTrigger(opts: {
      id: string;

      uri: string;
    }): Promise<HomeyAPIV3Cloud.ManagerFlow.FlowCardTrigger>;

    getFlowCardTriggers(): Promise<{
      [key: string]: HomeyAPIV3Cloud.ManagerFlow.FlowCardTrigger;
    }>;

    getFlowCardCondition(opts: {
      id: string;

      uri: string;
    }): Promise<HomeyAPIV3Cloud.ManagerFlow.FlowCardCondition>;

    getFlowCardConditions(): Promise<{
      [key: string]: HomeyAPIV3Cloud.ManagerFlow.FlowCardCondition;
    }>;

    runFlowCardCondition(opts: {
      id: string;

      uri: string;

      args?: object;

      tokens?: object;

      state?: object;

      droptoken?: string;
    }): Promise<any>;

    getFlowCardAction(opts: {
      id: string;

      uri: string;
    }): Promise<HomeyAPIV3Cloud.ManagerFlow.FlowCardAction>;

    getFlowCardActions(): Promise<{
      [key: string]: HomeyAPIV3Cloud.ManagerFlow.FlowCardAction;
    }>;

    runFlowCardAction(opts: {
      id: string;

      uri: string;

      args?: object;

      tokens?: object;

      state?: object;

      droptoken?: string;

      duration?: number;
    }): Promise<any>;

    getFlowCardAutocomplete(opts: {
      id: string;

      uri: string;

      type: string;

      name: string;

      query: string;

      args?: object;
    }): Promise<any>;

    getAdvancedFlow(opts: {
      id: string;
    }): Promise<HomeyAPIV3Cloud.ManagerFlow.AdvancedFlow>;

    getAdvancedFlows(): Promise<{
      [key: string]: HomeyAPIV3Cloud.ManagerFlow.AdvancedFlow;
    }>;

    createAdvancedFlow(opts: {
      advancedflow: any;
    }): Promise<HomeyAPIV3Cloud.ManagerFlow.AdvancedFlow>;

    updateAdvancedFlow(opts: {
      id: string;

      advancedflow: any;
    }): Promise<HomeyAPIV3Cloud.ManagerFlow.AdvancedFlow>;

    deleteAdvancedFlow(opts: { id: string }): Promise<any>;

    triggerAdvancedFlow(opts: { id: string }): Promise<any>;
  }

  export class ManagerFlowToken extends HomeyAPIV3.ManagerFlowToken {
    getState(): Promise<any>;

    getFlowTokens(): Promise<{
      [key: string]: HomeyAPIV3Cloud.ManagerFlowToken.FlowToken;
    }>;

    getFlowToken(opts: {
      id: string;
    }): Promise<HomeyAPIV3Cloud.ManagerFlowToken.FlowToken>;

    getFlowTokenValue(opts: { id: string }): Promise<any>;
  }

  export class ManagerGeolocation extends HomeyAPIV3.ManagerGeolocation {
    getOptionAddress(): Promise<any>;

    setOptionAddress(opts: { value: any }): Promise<any>;

    unsetOptionAddress(): Promise<any>;

    getOptionLocation(): Promise<any>;

    setOptionLocation(opts: { value: any }): Promise<any>;

    unsetOptionLocation(): Promise<any>;

    getState(): Promise<any>;
  }

  export class ManagerI18n extends HomeyAPIV3.ManagerI18n {
    getOptionLanguage(): Promise<any>;

    setOptionLanguage(opts: { value: any }): Promise<any>;

    unsetOptionLanguage(): Promise<any>;

    getOptionUnits(): Promise<any>;

    setOptionUnits(opts: { value: any }): Promise<any>;

    unsetOptionUnits(): Promise<any>;

    getState(): Promise<any>;
  }

  export class ManagerIcons extends HomeyAPIV3.ManagerIcons {
    getState(): Promise<any>;
  }

  export class ManagerImages extends HomeyAPIV3.ManagerImages {
    getState(): Promise<any>;

    getImages(): Promise<{
      [key: string]: HomeyAPIV3Cloud.ManagerImages.Image;
    }>;
  }

  export class ManagerInsights extends HomeyAPIV3.ManagerInsights {
    getState(): Promise<any>;

    getLog(opts: { id: string }): Promise<HomeyAPIV3Cloud.ManagerInsights.Log>;

    getLogs(): Promise<{ [key: string]: HomeyAPIV3Cloud.ManagerInsights.Log }>;

    getLogEntries(opts: {
      id: string;

      uri: string;

      resolution?: string;
    }): Promise<any>;

    deleteLog(opts: {
      id: string;

      uri: string;
    }): Promise<any>;

    deleteLogEntries(opts: {
      id: string;

      uri: string;
    }): Promise<any>;
  }

  export class ManagerLogic extends HomeyAPIV3.ManagerLogic {
    getState(): Promise<any>;

    getVariable(opts: {
      id: string;
    }): Promise<HomeyAPIV3Cloud.ManagerLogic.Variable>;

    getVariables(): Promise<{
      [key: string]: HomeyAPIV3Cloud.ManagerLogic.Variable;
    }>;

    createVariable(opts: {
      variable: {
        name: string;

        type: string;

        value: string | number | boolean;
      };
    }): Promise<HomeyAPIV3Cloud.ManagerLogic.Variable>;

    updateVariable(opts: {
      id: string;

      variable: {
        name?: string;

        value?: string | number | boolean;
      };
    }): Promise<HomeyAPIV3Cloud.ManagerLogic.Variable>;

    deleteVariable(opts: { id: string }): Promise<any>;
  }

  export class ManagerMobile extends HomeyAPIV3.ManagerMobile {
    getState(): Promise<any>;

    onMobileEvent(opts: {
      secret: string;

      userId: string;

      deviceId: string;

      event: string;

      data: any;

      timestamp?: string;
    }): Promise<any>;
  }

  export class ManagerNotifications extends HomeyAPIV3.ManagerNotifications {
    getState(): Promise<any>;

    getNotifications(): Promise<{
      [key: string]: HomeyAPIV3Cloud.ManagerNotifications.Notification;
    }>;

    deleteNotification(opts: { id: string }): Promise<any>;

    deleteNotifications(opts: { ownerUri?: string }): Promise<any>;

    getOwners(): Promise<any>;

    setOwnerEnabled(opts: {
      uri: string;

      enabled: boolean;
    }): Promise<any>;

    setOwnerPush(opts: {
      uri: string;

      push: boolean;
    }): Promise<any>;
  }

  export class ManagerPremium extends HomeyAPIV3.ManagerPremium {}

  export class ManagerPresence extends HomeyAPIV3.ManagerPresence {
    getState(): Promise<any>;

    setPresentMe(opts: {
      value?: boolean;

      opts?: {
        forceFlowTrigger?: boolean;
      };
    }): Promise<any>;

    setPresent(opts: {
      id: string;

      value?: boolean;
    }): Promise<any>;

    getPresent(opts: { id: string }): Promise<any>;

    setAsleepMe(opts: {
      value?: boolean;

      opts?: {
        forceFlowTrigger?: boolean;
      };
    }): Promise<any>;

    setAsleep(opts: {
      id: string;

      value?: boolean;
    }): Promise<any>;

    getAsleep(opts: { id: string }): Promise<any>;
  }

  export class ManagerRF extends HomeyAPIV3.ManagerRF {
    getState(): Promise<any>;

    record(opts: {
      frequency?: string;

      timeout?: number;
    }): Promise<any>;

    replay(opts: {
      frequency: string;

      data: Array<any>;
    }): Promise<any>;

    emulate(opts: {
      frequency: string;

      data: Array<any>;
    }): Promise<any>;

    set433MHzConfig(opts: {
      modulation?: string;

      carrier?: number;

      deviation?: number;

      channelSpacing?: number;

      filterBandwidth?: number;

      baudrate?: number;

      power?: number;
    }): Promise<any>;

    txInfraredProntohex(opts: {
      payload: string;

      repetitions?: number;
    }): Promise<any>;
  }

  export class ManagerSafety extends HomeyAPIV3.ManagerSafety {
    getState(): Promise<any>;
  }

  export class ManagerSecurity extends HomeyAPIV3.ManagerSecurity {
    getState(): Promise<any>;
  }

  export class ManagerSessions extends HomeyAPIV3.ManagerSessions {
    getState(): Promise<any>;

    getSessionMe(): Promise<any>;
  }

  export class ManagerSystem extends HomeyAPIV3.ManagerSystem {
    getState(): Promise<any>;

    ping(): Promise<any>;

    getInfo(): Promise<any>;

    getSystemName(): Promise<any>;

    setSystemName(opts: { name: string }): Promise<any>;

    reboot(): Promise<any>;

    sendLog(opts: { append?: string }): Promise<any>;

    delete(): Promise<any>;

    getMemoryInfo(): Promise<any>;

    getStorageInfo(): Promise<any>;
  }

  export class ManagerUsers extends HomeyAPIV3.ManagerUsers {
    getState(): Promise<any>;

    login(opts: { token: string }): Promise<any>;

    getUserMe(): Promise<any>;

    updateUserMe(opts: { name?: string }): Promise<any>;

    deleteUserMe(): Promise<any>;

    getUsers(): Promise<{ [key: string]: HomeyAPIV3Cloud.ManagerUsers.User }>;

    getUser(opts: { id: string }): Promise<HomeyAPIV3Cloud.ManagerUsers.User>;

    createUser(opts: {
      user: {
        role: string;
      };
    }): Promise<HomeyAPIV3Cloud.ManagerUsers.User>;

    updateUser(opts: {
      id: string;

      user: {
        role?: string;

        enabled?: boolean;
      };
    }): Promise<HomeyAPIV3Cloud.ManagerUsers.User>;

    deleteUser(opts: { id: string }): Promise<any>;

    updateUserMeProperties(opts: {
      id: string;

      value: object;
    }): Promise<any>;

    deleteUserMeProperties(opts: { id: string }): Promise<any>;

    acceptSharingInvite(opts: {
      secret: string;

      athomId: string;

      inviteToken: string;

      name: string;
    }): Promise<any>;
  }

  export class ManagerVirtualDevice extends HomeyAPIV3.ManagerVirtualDevice {
    getState(): Promise<any>;
  }

  export class ManagerWeather extends HomeyAPIV3.ManagerWeather {
    getState(): Promise<any>;

    getWeather(): Promise<any>;
  }

  export class ManagerWebserver extends HomeyAPIV3.ManagerWebserver {
    getState(): Promise<any>;
  }

  export class ManagerZigbee extends HomeyAPIV3.ManagerZigbee {
    getState(): Promise<any>;

    runCommand(opts: {
      command: string;

      opts?: object;
    }): Promise<any>;
  }

  export class ManagerZones extends HomeyAPIV3.ManagerZones {
    getState(): Promise<any>;

    getZones(): Promise<{ [key: string]: HomeyAPIV3Cloud.ManagerZones.Zone }>;

    getZone(opts: { id: string }): Promise<HomeyAPIV3Cloud.ManagerZones.Zone>;

    createZone(opts: {
      zone: {
        name: string;

        icon: string;

        parent: string;
      };
    }): Promise<HomeyAPIV3Cloud.ManagerZones.Zone>;

    updateZone(opts: {
      id: string;

      zone: {
        name?: string;

        icon?: string;

        parent?: string;
      };
    }): Promise<HomeyAPIV3Cloud.ManagerZones.Zone>;

    deleteZone(opts: { id: string }): Promise<any>;
  }

  export class ManagerZwave extends HomeyAPIV3.ManagerZwave {
    getOptionRegionOverride(): Promise<any>;

    setOptionRegionOverride(opts: { value: any }): Promise<any>;

    unsetOptionRegionOverride(): Promise<any>;

    getState(): Promise<any>;

    runCommand(opts: {
      command: string;

      opts?: object;
    }): Promise<any>;
  }
}

export namespace HomeyAPIV3.ManagerDevices.Device {
  export class DeviceCapability extends EventEmitter {
    value: boolean | number | string | null;

    lastChanged: Date | null;

    destroy(): any;

    setValue(
      value: boolean | number | string,

      opts?: {
        duration?: number;
      },
    ): Promise<any>;

    emit(
      event: string,

      data: any,
    ): any;

    addListener(
      event: string,

      callback: Function,
    ): any;

    on(
      event: string,

      callback: Function,
    ): any;

    once(
      event: string,

      callback: Function,
    ): any;

    off(
      event: string,

      callback: Function,
    ): any;

    removeListener(
      event: string,

      callback: Function,
    ): any;

    removeAllListeners(event?: string): any;
  }
}

export namespace HomeyAPIV3.ManagerDrivers {
  export class Driver extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class PairSession extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export namespace HomeyAPI {
  export class HomeyAPIError extends APIError {
    description: string;

    stack: string;

    message: string;

    statusCode: number;
  }

  export class HomeyAPIErrorNotFound extends HomeyAPIError {}
}

export namespace HomeyAPIV3 {
  export class Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class Manager extends EventEmitter {
    homey: HomeyAPIV3;

    uri: String;

    isConnected(): Boolean;

    connect(): Promise<void>;

    disconnect(): Promise<void>;

    destroy(): any;

    emit(
      event: string,

      data: any,
    ): any;

    addListener(
      event: string,

      callback: Function,
    ): any;

    on(
      event: string,

      callback: Function,
    ): any;

    once(
      event: string,

      callback: Function,
    ): any;

    off(
      event: string,

      callback: Function,
    ): any;

    removeListener(
      event: string,

      callback: Function,
    ): any;

    removeAllListeners(event?: string): any;
  }

  export class ManagerDrivers extends HomeyAPIV3.Manager {
    homey: HomeyAPIV3;

    uri: String;

    isConnected(): Boolean;

    connect(): Promise<void>;

    disconnect(): Promise<void>;

    destroy(): any;

    emit(
      event: string,

      data: any,
    ): any;

    addListener(
      event: string,

      callback: Function,
    ): any;

    on(
      event: string,

      callback: Function,
    ): any;

    once(
      event: string,

      callback: Function,
    ): any;

    off(
      event: string,

      callback: Function,
    ): any;

    removeListener(
      event: string,

      callback: Function,
    ): any;

    removeAllListeners(event?: string): any;
  }
}

export namespace HomeyAPIV2 {
  export class Manager extends HomeyAPIV3.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerAlarms extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerApps extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerAudio extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerBackup extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerBLE extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerCloud extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerDatabase extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerDevices extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerDevkit extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerDrivers extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerEnergy extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerExperiments extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerFlow extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerFlowToken extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerGeolocation extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerGoogleAssistant extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerI18n extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerImages extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerInsights extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerLedring extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerLogic extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerMobile extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerNotifications extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerPresence extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerRF extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerSessions extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerSpeechOutput extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerSystem extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerUpdates extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerUsers extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerWeather extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerZigBee extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerZones extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }

  export class ManagerZwave extends HomeyAPIV2.Manager {
    homey: HomeyAPIV3;

    uri: String;
  }
}

export namespace HomeyAPIV3Local {
  export class Item extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class Manager extends HomeyAPIV3.Manager {
    homey: HomeyAPIV3;

    uri: String;

    isConnected(): Boolean;

    connect(): Promise<void>;

    disconnect(): Promise<void>;

    destroy(): any;

    emit(
      event: string,

      data: any,
    ): any;

    addListener(
      event: string,

      callback: Function,
    ): any;

    on(
      event: string,

      callback: Function,
    ): any;

    once(
      event: string,

      callback: Function,
    ): any;

    off(
      event: string,

      callback: Function,
    ): any;

    removeListener(
      event: string,

      callback: Function,
    ): any;

    removeAllListeners(event?: string): any;
  }

  export class ManagerAlarms extends HomeyAPIV3.ManagerAlarms {
    getAlarms(): Promise<{
      [key: string]: HomeyAPIV3Local.ManagerAlarms.Alarm;
    }>;

    getAlarm(opts: {
      id: string;
    }): Promise<HomeyAPIV3Local.ManagerAlarms.Alarm>;

    createAlarm(opts: {
      alarm: {
        name?: string;

        time?: string;

        enabled?: boolean;

        repetition?: object;
      };
    }): Promise<HomeyAPIV3Local.ManagerAlarms.Alarm>;

    updateAlarm(opts: {
      id: string;

      alarm: {
        name?: string;

        time?: string;

        enabled?: boolean;

        repetition?: object;
      };
    }): Promise<HomeyAPIV3Local.ManagerAlarms.Alarm>;

    deleteAlarm(opts: { id: string }): Promise<any>;
  }

  export class ManagerApi extends HomeyAPIV3.ManagerApi {
    getState(): Promise<any>;
  }

  export class ManagerApps extends HomeyAPIV3.ManagerApps {
    getState(): Promise<any>;

    getApps(): Promise<{ [key: string]: HomeyAPIV3Local.ManagerApps.App }>;

    getApp(opts: { id: string }): Promise<HomeyAPIV3Local.ManagerApps.App>;

    installFromAppStore(opts: {
      id: string;

      channel?: string;
    }): Promise<any>;

    uninstallApp(opts: { id: string }): Promise<any>;

    getAppSettings(opts: {
      id: string;
    }): Promise<HomeyAPIV3Local.ManagerApps.AppSettings>;

    getAppSetting(opts: {
      name: string;

      id: string;
    }): Promise<any>;

    setAppSetting(opts: {
      name: string;

      id: string;

      value: any;
    }): Promise<any>;

    unsetAppSetting(opts: {
      name: string;

      id: string;
    }): Promise<any>;

    getAppStd(opts: {
      id: string;

      message: string;
    }): Promise<any>;

    updateApp(opts: {
      id: string;

      app: {
        autoupdate?: boolean;
      };
    }): Promise<HomeyAPIV3Local.ManagerApps.App>;

    enableApp(opts: { id: string }): Promise<any>;

    disableApp(opts: { id: string }): Promise<any>;

    restartApp(opts: { id: string }): Promise<any>;

    getAppLocales(opts: { id: string }): Promise<any>;

    getAppUsage(opts: { id: string }): Promise<any>;
  }

  export class ManagerArp extends HomeyAPIV3.ManagerArp {
    getState(): Promise<any>;
  }

  export class ManagerBackup extends HomeyAPIV3.ManagerBackup {
    getOptionAutomaticBackupsEnabled(): Promise<any>;

    setOptionAutomaticBackupsEnabled(opts: { value: any }): Promise<any>;

    unsetOptionAutomaticBackupsEnabled(): Promise<any>;

    getOptionLastSuccessfulBackup(): Promise<any>;

    setOptionLastSuccessfulBackup(opts: { value: any }): Promise<any>;

    unsetOptionLastSuccessfulBackup(): Promise<any>;

    getState(): Promise<any>;

    scheduleBackup(): Promise<any>;
  }

  export class ManagerBLE extends HomeyAPIV3.ManagerBLE {
    getState(): Promise<any>;

    runCommand(opts: {
      command: string;

      opts?: object;
    }): Promise<any>;
  }

  export class ManagerClock extends HomeyAPIV3.ManagerClock {
    getState(): Promise<any>;
  }

  export class ManagerCloud extends HomeyAPIV3.ManagerCloud {
    getState(): Promise<any>;
  }

  export class ManagerCoprocessor extends HomeyAPIV3.ManagerCoprocessor {
    getState(): Promise<any>;

    getBridges(): Promise<any>;

    pairBridge(opts: { serialHash: string }): Promise<any>;
  }

  export class ManagerCron extends HomeyAPIV3.ManagerCron {
    getState(): Promise<any>;
  }

  export class ManagerDatabase extends HomeyAPIV3.ManagerDatabase {
    getState(): Promise<any>;
  }

  export class ManagerDevices extends HomeyAPIV3.ManagerDevices {
    getState(): Promise<any>;

    getDevice(opts: {
      id: string;
    }): Promise<HomeyAPIV3Local.ManagerDevices.Device>;

    getDeviceSettingsObj(opts: { id: string }): Promise<any>;

    setDeviceSettings(opts: {
      id: string;

      settings: object;
    }): Promise<any>;

    getDevices(): Promise<{
      [key: string]: HomeyAPIV3Local.ManagerDevices.Device;
    }>;

    updateDevice(opts: {
      id: string;

      device: {
        name?: string;

        zone?: string;

        note?: string;

        iconOverride?: string;

        virtualClass?: string;

        uiIndicator?: string;
      };
    }): Promise<HomeyAPIV3Local.ManagerDevices.Device>;

    deleteDevice(opts: { id: string }): Promise<any>;

    getCapabilityValue(opts: {
      capabilityId: string;

      deviceId: string;
    }): Promise<any>;

    setCapabilityValue(opts: {
      capabilityId: string;

      deviceId: string;

      value: string | number | boolean;

      opts?: object;

      transactionId?: string;
    }): Promise<any>;
  }

  export class ManagerDevkit extends HomeyAPIV3.ManagerDevkit {
    getState(): Promise<any>;

    installApp(opts: {
      manifest: object;

      clean?: boolean;
    }): Promise<any>;

    uninstallApp(opts: { sessionId: string }): Promise<any>;

    stopApp(opts: { session: string }): Promise<any>;

    getAppStdOut(opts: { session: string }): Promise<any>;

    runApp(opts: {
      app: ReadableStream;

      env: Object;

      debug: Boolean;

      clean: Boolean;
    }): Promise<any>;
  }

  export class ManagerDiscovery extends HomeyAPIV3.ManagerDiscovery {
    getState(): Promise<any>;
  }

  export class ManagerDrivers extends HomeyAPIV3.ManagerDrivers {
    homey: HomeyAPIV3;

    uri: String;

    getState(): Promise<any>;

    getDrivers(): Promise<{
      [key: string]: HomeyAPIV3Local.ManagerDrivers.Driver;
    }>;

    getPairSession(opts: {
      id: string;
    }): Promise<HomeyAPIV3Local.ManagerDrivers.PairSession>;

    createPairSession(opts: {
      pairsession: {
        type: string;

        driverId: string;

        deviceId?: string;

        zoneId?: string;
      };
    }): Promise<HomeyAPIV3Local.ManagerDrivers.PairSession>;

    deletePairSession(opts: { id: string }): Promise<any>;

    emitPairingHeartbeat(opts: { id: string }): Promise<any>;

    emitPairingEvent(opts: {
      id: string;

      event: string;

      data?: any;
    }): Promise<any>;

    emitPairingCallback(opts: {
      id: string;

      callbackId: string;

      data?: any;
    }): Promise<any>;

    createPairSessionDevice(opts: {
      id: string;

      device: {
        name?: string;

        data: any;

        zone?: string;

        store?: object;

        capabilities?: Array<any>;

        capabilitiesOptions?: object;

        class?: string;

        icon?: string;

        iconOverride?: string;

        settings?: object;

        energy?: object;
      };
    }): Promise<any>;

    deletePairSessionDevice(opts: { id: string }): Promise<any>;

    isConnected(): Boolean;

    connect(): Promise<void>;

    disconnect(): Promise<void>;

    destroy(): any;

    emit(
      event: string,

      data: any,
    ): any;

    addListener(
      event: string,

      callback: Function,
    ): any;

    on(
      event: string,

      callback: Function,
    ): any;

    once(
      event: string,

      callback: Function,
    ): any;

    off(
      event: string,

      callback: Function,
    ): any;

    removeListener(
      event: string,

      callback: Function,
    ): any;

    removeAllListeners(event?: string): any;
  }

  export class ManagerEnergy extends HomeyAPIV3.ManagerEnergy {
    getState(): Promise<any>;

    getLiveReport(opts: { zone?: string }): Promise<any>;
  }

  export class ManagerExperiments extends HomeyAPIV3.ManagerExperiments {
    getState(): Promise<any>;

    getExperiments(): Promise<any>;

    enableExperiment(opts: { id: string }): Promise<any>;

    disableExperiment(opts: { id: string }): Promise<any>;
  }

  export class ManagerFlow extends HomeyAPIV3.ManagerFlow {
    getState(): Promise<any>;

    getFlow(opts: { id: string }): Promise<HomeyAPIV3Local.ManagerFlow.Flow>;

    getFlows(): Promise<{ [key: string]: HomeyAPIV3Local.ManagerFlow.Flow }>;

    createFlow(opts: {
      flow: {
        name: string;

        folder?: string;

        enabled?: boolean;

        trigger: object;

        conditions: Array<any>;

        actions: Array<any>;
      };
    }): Promise<HomeyAPIV3Local.ManagerFlow.Flow>;

    updateFlow(opts: {
      id: string;

      flow: {
        name?: string;

        folder?: string;

        enabled?: boolean;

        trigger?: object;

        conditions?: Array<any>;

        actions?: Array<any>;
      };
    }): Promise<HomeyAPIV3Local.ManagerFlow.Flow>;

    deleteFlow(opts: { id: string }): Promise<any>;

    testFlow(opts: {
      flow: {
        trigger: object;

        conditions: Array<any>;

        actions: Array<any>;
      };

      tokens: object;

      sessionId: string;
    }): Promise<any>;

    triggerFlow(opts: { id: string }): Promise<any>;

    shareFlow(opts: { id: string }): Promise<any>;

    getFlowFolders(): Promise<{
      [key: string]: HomeyAPIV3Local.ManagerFlow.FlowFolder;
    }>;

    getFlowFolder(opts: {
      id: string;
    }): Promise<HomeyAPIV3Local.ManagerFlow.FlowFolder>;

    createFlowFolder(opts: {
      flowfolder: {
        name: string;

        parent?: string;
      };
    }): Promise<HomeyAPIV3Local.ManagerFlow.FlowFolder>;

    updateFlowFolder(opts: {
      id: string;

      flowfolder: {
        name?: string;

        parent?: string;
      };
    }): Promise<HomeyAPIV3Local.ManagerFlow.FlowFolder>;

    deleteFlowFolder(opts: { id: string }): Promise<any>;

    getFlowCardTrigger(opts: {
      id: string;

      uri: string;
    }): Promise<HomeyAPIV3Local.ManagerFlow.FlowCardTrigger>;

    getFlowCardTriggers(): Promise<{
      [key: string]: HomeyAPIV3Local.ManagerFlow.FlowCardTrigger;
    }>;

    getFlowCardCondition(opts: {
      id: string;

      uri: string;
    }): Promise<HomeyAPIV3Local.ManagerFlow.FlowCardCondition>;

    getFlowCardConditions(): Promise<{
      [key: string]: HomeyAPIV3Local.ManagerFlow.FlowCardCondition;
    }>;

    runFlowCardCondition(opts: {
      id: string;

      uri: string;

      args?: object;

      tokens?: object;

      state?: object;

      droptoken?: string;
    }): Promise<any>;

    getFlowCardAction(opts: {
      id: string;

      uri: string;
    }): Promise<HomeyAPIV3Local.ManagerFlow.FlowCardAction>;

    getFlowCardActions(): Promise<{
      [key: string]: HomeyAPIV3Local.ManagerFlow.FlowCardAction;
    }>;

    runFlowCardAction(opts: {
      id: string;

      uri: string;

      args?: object;

      tokens?: object;

      state?: object;

      droptoken?: string;

      duration?: number;
    }): Promise<any>;

    getFlowCardAutocomplete(opts: {
      id: string;

      uri: string;

      type: string;

      name: string;

      query: string;

      args?: object;
    }): Promise<any>;

    getAdvancedFlow(opts: {
      id: string;
    }): Promise<HomeyAPIV3Local.ManagerFlow.AdvancedFlow>;

    getAdvancedFlows(): Promise<{
      [key: string]: HomeyAPIV3Local.ManagerFlow.AdvancedFlow;
    }>;

    createAdvancedFlow(opts: {
      advancedflow: any;
    }): Promise<HomeyAPIV3Local.ManagerFlow.AdvancedFlow>;

    updateAdvancedFlow(opts: {
      id: string;

      advancedflow: any;
    }): Promise<HomeyAPIV3Local.ManagerFlow.AdvancedFlow>;

    deleteAdvancedFlow(opts: { id: string }): Promise<any>;

    triggerAdvancedFlow(opts: { id: string }): Promise<any>;
  }

  export class ManagerFlowToken extends HomeyAPIV3.ManagerFlowToken {
    getState(): Promise<any>;

    getFlowTokens(): Promise<{
      [key: string]: HomeyAPIV3Local.ManagerFlowToken.FlowToken;
    }>;

    getFlowToken(opts: {
      id: string;
    }): Promise<HomeyAPIV3Local.ManagerFlowToken.FlowToken>;

    getFlowTokenValue(opts: { id: string }): Promise<any>;
  }

  export class ManagerGeolocation extends HomeyAPIV3.ManagerGeolocation {
    getOptionAddress(): Promise<any>;

    setOptionAddress(opts: { value: any }): Promise<any>;

    unsetOptionAddress(): Promise<any>;

    getOptionLocation(): Promise<any>;

    setOptionLocation(opts: { value: any }): Promise<any>;

    unsetOptionLocation(): Promise<any>;

    getState(): Promise<any>;
  }

  export class ManagerGoogleAssistant extends HomeyAPIV3.ManagerGoogleAssistant {
    getOptionEnabled(): Promise<any>;

    setOptionEnabled(opts: { value: any }): Promise<any>;

    unsetOptionEnabled(): Promise<any>;

    getState(): Promise<any>;

    sync(): Promise<any>;
  }

  export class ManagerI18n extends HomeyAPIV3.ManagerI18n {
    getOptionLanguage(): Promise<any>;

    setOptionLanguage(opts: { value: any }): Promise<any>;

    unsetOptionLanguage(): Promise<any>;

    getOptionUnits(): Promise<any>;

    setOptionUnits(opts: { value: any }): Promise<any>;

    unsetOptionUnits(): Promise<any>;

    getState(): Promise<any>;
  }

  export class ManagerIcons extends HomeyAPIV3.ManagerIcons {
    getState(): Promise<any>;
  }

  export class ManagerImages extends HomeyAPIV3.ManagerImages {
    getState(): Promise<any>;

    getImages(): Promise<{
      [key: string]: HomeyAPIV3Local.ManagerImages.Image;
    }>;
  }

  export class ManagerInsights extends HomeyAPIV3.ManagerInsights {
    getState(): Promise<any>;

    getLog(opts: { id: string }): Promise<HomeyAPIV3Local.ManagerInsights.Log>;

    getLogs(): Promise<{ [key: string]: HomeyAPIV3Local.ManagerInsights.Log }>;

    getLogEntries(opts: {
      id: string;

      uri: string;

      resolution?: string;
    }): Promise<any>;

    deleteLog(opts: {
      id: string;

      uri: string;
    }): Promise<any>;

    deleteLogEntries(opts: {
      id: string;

      uri: string;
    }): Promise<any>;
  }

  export class ManagerLedring extends HomeyAPIV3.ManagerLedring {
    getOptionScreensaver(): Promise<any>;

    setOptionScreensaver(opts: { value: any }): Promise<any>;

    unsetOptionScreensaver(): Promise<any>;

    getState(): Promise<any>;

    getScreensavers(): Promise<any>;
  }

  export class ManagerLogic extends HomeyAPIV3.ManagerLogic {
    getState(): Promise<any>;

    getVariable(opts: {
      id: string;
    }): Promise<HomeyAPIV3Local.ManagerLogic.Variable>;

    getVariables(): Promise<{
      [key: string]: HomeyAPIV3Local.ManagerLogic.Variable;
    }>;

    createVariable(opts: {
      variable: {
        name: string;

        type: string;

        value: string | number | boolean;
      };
    }): Promise<HomeyAPIV3Local.ManagerLogic.Variable>;

    updateVariable(opts: {
      id: string;

      variable: {
        name?: string;

        value?: string | number | boolean;
      };
    }): Promise<HomeyAPIV3Local.ManagerLogic.Variable>;

    deleteVariable(opts: { id: string }): Promise<any>;
  }

  export class ManagerMatter extends HomeyAPIV3.ManagerMatter {
    getOptionPaaSettings(): Promise<any>;

    setOptionPaaSettings(opts: { value: any }): Promise<any>;

    unsetOptionPaaSettings(): Promise<any>;

    getState(): Promise<any>;
  }

  export class ManagerMobile extends HomeyAPIV3.ManagerMobile {
    getState(): Promise<any>;
  }

  export class ManagerNotifications extends HomeyAPIV3.ManagerNotifications {
    getState(): Promise<any>;

    getNotifications(): Promise<{
      [key: string]: HomeyAPIV3Local.ManagerNotifications.Notification;
    }>;

    deleteNotification(opts: { id: string }): Promise<any>;

    deleteNotifications(opts: { ownerUri?: string }): Promise<any>;

    getOwners(): Promise<any>;

    setOwnerEnabled(opts: {
      uri: string;

      enabled: boolean;
    }): Promise<any>;

    setOwnerPush(opts: {
      uri: string;

      push: boolean;
    }): Promise<any>;
  }

  export class ManagerPresence extends HomeyAPIV3.ManagerPresence {
    getState(): Promise<any>;

    setPresentMe(opts: {
      value?: boolean;

      opts?: {
        forceFlowTrigger?: boolean;
      };
    }): Promise<any>;

    setPresent(opts: {
      id: string;

      value?: boolean;
    }): Promise<any>;

    getPresent(opts: { id: string }): Promise<any>;

    setAsleepMe(opts: {
      value?: boolean;

      opts?: {
        forceFlowTrigger?: boolean;
      };
    }): Promise<any>;

    setAsleep(opts: {
      id: string;

      value?: boolean;
    }): Promise<any>;

    getAsleep(opts: { id: string }): Promise<any>;
  }

  export class ManagerRF extends HomeyAPIV3.ManagerRF {
    getState(): Promise<any>;

    record(opts: {
      frequency?: string;

      timeout?: number;
    }): Promise<any>;

    replay(opts: {
      frequency: string;

      data: Array<any>;
    }): Promise<any>;

    emulate(opts: {
      frequency: string;

      data: Array<any>;
    }): Promise<any>;

    set433MHzConfig(opts: {
      modulation?: string;

      carrier?: number;

      deviation?: number;

      channelSpacing?: number;

      filterBandwidth?: number;

      baudrate?: number;

      power?: number;
    }): Promise<any>;

    txInfraredProntohex(opts: {
      payload: string;

      repetitions?: number;
    }): Promise<any>;
  }

  export class ManagerSafety extends HomeyAPIV3.ManagerSafety {
    getState(): Promise<any>;
  }

  export class ManagerSatellites extends HomeyAPIV3.ManagerSatellites {
    getState(): Promise<any>;
  }

  export class ManagerSecurity extends HomeyAPIV3.ManagerSecurity {
    getState(): Promise<any>;
  }

  export class ManagerSessions extends HomeyAPIV3.ManagerSessions {
    getState(): Promise<any>;

    getSessionMe(): Promise<any>;
  }

  export class ManagerSystem extends HomeyAPIV3.ManagerSystem {
    getOptionForwardedPort(): Promise<any>;

    setOptionForwardedPort(opts: { value: any }): Promise<any>;

    unsetOptionForwardedPort(): Promise<any>;

    getState(): Promise<any>;

    ping(opts: { id?: string }): Promise<any>;

    getInfo(): Promise<any>;

    getSystemName(): Promise<any>;

    setSystemName(opts: { name: string }): Promise<any>;

    reboot(): Promise<any>;

    sendLog(opts: { append?: string }): Promise<any>;

    getMemoryInfo(): Promise<any>;

    getStorageInfo(): Promise<any>;

    rebootOTA(): Promise<any>;

    setDebug(opts: { namespace: string }): Promise<any>;

    enableWifi(): Promise<any>;

    disableWifi(): Promise<any>;
  }

  export class ManagerThread extends HomeyAPIV3.ManagerThread {
    getState(): Promise<any>;
  }

  export class ManagerUpdates extends HomeyAPIV3.ManagerUpdates {
    getOptionChannel(): Promise<any>;

    setOptionChannel(opts: { value: any }): Promise<any>;

    unsetOptionChannel(): Promise<any>;

    getOptionAutoupdate(): Promise<any>;

    setOptionAutoupdate(opts: { value: any }): Promise<any>;

    unsetOptionAutoupdate(): Promise<any>;

    getState(): Promise<any>;

    getUpdates(): Promise<any>;

    installUpdate(opts: {
      reboot?: boolean;

      silent?: boolean;
    }): Promise<any>;

    abortInstallUpdate(): Promise<any>;
  }

  export class ManagerUsers extends HomeyAPIV3.ManagerUsers {
    getState(): Promise<any>;

    login(opts: { token: string }): Promise<any>;

    getUserMe(): Promise<any>;

    updateUserMe(opts: { name?: string }): Promise<any>;

    deleteUserMe(): Promise<any>;

    getUsers(): Promise<{ [key: string]: HomeyAPIV3Local.ManagerUsers.User }>;

    getUser(opts: { id: string }): Promise<HomeyAPIV3Local.ManagerUsers.User>;

    createUser(opts: {
      user: {
        role: string;
      };
    }): Promise<HomeyAPIV3Local.ManagerUsers.User>;

    updateUser(opts: {
      id: string;

      user: {
        role?: string;

        enabled?: boolean;
      };
    }): Promise<HomeyAPIV3Local.ManagerUsers.User>;

    deleteUser(opts: { id: string }): Promise<any>;

    updateUserMeProperties(opts: {
      id: string;

      value: object;
    }): Promise<any>;

    deleteUserMeProperties(opts: { id: string }): Promise<any>;

    swapOwner(opts: { newOwnerUserId: string }): Promise<any>;

    getPersonalAccessTokens(): Promise<any>;

    createPersonalAccessToken(opts: {
      name: string;

      scopes: Array<any>;
    }): Promise<any>;

    deletePersonalAccessToken(opts: { id: string }): Promise<any>;
  }

  export class ManagerVirtualDevice extends HomeyAPIV3.ManagerVirtualDevice {
    getState(): Promise<any>;
  }

  export class ManagerWeather extends HomeyAPIV3.ManagerWeather {
    getState(): Promise<any>;

    getWeather(): Promise<any>;
  }

  export class ManagerWebserver extends HomeyAPIV3.ManagerWebserver {
    getState(): Promise<any>;
  }

  export class ManagerZigbee extends HomeyAPIV3.ManagerZigbee {
    getState(): Promise<any>;

    runCommand(opts: {
      command: string;

      opts?: object;
    }): Promise<any>;
  }

  export class ManagerZones extends HomeyAPIV3.ManagerZones {
    getState(): Promise<any>;

    getZones(): Promise<{ [key: string]: HomeyAPIV3Local.ManagerZones.Zone }>;

    getZone(opts: { id: string }): Promise<HomeyAPIV3Local.ManagerZones.Zone>;

    createZone(opts: {
      zone: {
        name: string;

        icon: string;

        parent: string;
      };
    }): Promise<HomeyAPIV3Local.ManagerZones.Zone>;

    updateZone(opts: {
      id: string;

      zone: {
        name?: string;

        icon?: string;

        parent?: string;
      };
    }): Promise<HomeyAPIV3Local.ManagerZones.Zone>;

    deleteZone(opts: { id: string }): Promise<any>;
  }

  export class ManagerZwave extends HomeyAPIV3.ManagerZwave {
    getOptionRegionOverride(): Promise<any>;

    setOptionRegionOverride(opts: { value: any }): Promise<any>;

    unsetOptionRegionOverride(): Promise<any>;

    getState(): Promise<any>;

    runCommand(opts: {
      command: string;

      opts?: object;
    }): Promise<any>;

    getLog(): Promise<any>;

    setLogEnabled(opts: { enabled: boolean }): Promise<any>;
  }
}

export namespace HomeyAPIV3.ManagerApps {
  export class App extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    call(opts: {
      method: "GET" | "POST" | "PUT" | "DELETE";

      path: String;

      body: any;
    }): Promise<any>;

    get(opts: { path: string }): Promise<any>;

    post(opts: {
      path: string;

      body: object;
    }): Promise<any>;

    put(opts: {
      path: string;

      body: object;
    }): Promise<any>;

    delete(opts: { path: string }): Promise<any>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export namespace HomeyAPIV3.ManagerDevices {
  export class Capability extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class Device extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    makeCapabilityInstance(
      capabilityId: string,

      listener: (value: number | boolean | string) => any,
    ): HomeyAPIV3.ManagerDevices.Device.DeviceCapability;

    setCapabilityValue(opts: {
      capabilityId: string;

      value: number | boolean | string;

      opts?: {
        duration?: number;
      };
    }): Promise<void>;

    getZone(): Promise<HomeyAPIV3.ManagerZones.Zone>;

    getDriver(): Promise<HomeyAPIV3.ManagerDrivers.Driver>;

    getLogs(): Promise<{ [key: string]: HomeyAPIV3.ManagerInsights.Log }>;

    getFlows(): Promise<{ [key: string]: HomeyAPIV3.ManagerFlow.Flow }>;

    getAdvancedFlows(): Promise<{
      [key: string]: HomeyAPIV3.ManagerFlow.AdvancedFlow;
    }>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export namespace HomeyAPIV3.ManagerFlow {
  export class AdvancedFlow extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    isBroken(): Promise<any>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class Flow extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    isBroken(): Promise<any>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class FlowCard extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class FlowCardAction extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class FlowCardCondition extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }

  export class FlowCardTrigger extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export namespace HomeyAPIV3.ManagerFlowToken {
  export class FlowToken extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export namespace HomeyAPIV3.ManagerInsights {
  export class Log extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}

export namespace HomeyAPIV3.ManagerZones {
  export class Zone extends HomeyAPIV3.Item {
    id: string;

    uri: string;

    manager: HomeyAPIV3.Manager;

    homey: HomeyAPIV3;

    getParent(): Promise<HomeyAPIV3.ManagerZones.Zone | null>;

    connect(): Promise<any>;

    disconnect(): Promise<any>;
  }
}
